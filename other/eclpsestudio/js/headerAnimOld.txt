
var smoothTrail = function(c, cw, ch){		
  
/*Variables*/
  var _this = this;
  this.c = c;
  this.ctx = c.getContext('2d');
  this.cw = cw;
  this.ch = ch;
  this.mx = 0;
  this.my = 0;
  var d = new Date();
  
  //trail
  this.trail = [];
  //this.maxTrail = 200;
  this.maxTrail = 500;
  this.mouseDown = false;
  
  this.ctx.lineWidth = .1;
  this.ctx.lineJoin = 'round';
  
  //this.radius = 350;
  this.radius = 1;
  this.speed = 0.014;
  this.angle = 0;
  this.arcx = 0;
  this.arcy = 0;
  this.growRadius = true;
  this.seconds = 0;
  this.milliseconds = 1000;
  //добавил
  this.size;
  
/*Utility Functions*/				
  this.rand = function(rMi, rMa){return ~~((Math.random()*(rMa-rMi+1))+rMi);};
  this.hitTest = function(x1, y1, w1, h1, x2, y2, w2, h2){return !(x1 + w1 < x2 || x2 + w2 < x1 || y1 + h1 < y2 || y2 + h2 < y1);};
  
/*Create Point*/
  this.createPoint = function(x, y){					
    this.trail.push({
      x: x,
      y: y						
    });
  };
  
/*Update Trail*/
  this.updateTrail = function(){					
    
    if(this.trail.length < this.maxTrail){
      this.createPoint(this.arcx, this.arcy);
    }					
    
    if(this.trail.length >= this.maxTrail){
      this.trail.splice(0, 1);
    }					
  };
  
/*Update Arc*/
  this.updateArc = function(){
    this.arcx = (this.cw/2) + Math.sin(this.angle) * this.radius;
    this.arcy = (this.ch/2) + Math.cos(this.angle) * this.radius;	
    this.seconds = d.getSeconds();
    this.milliseconds = d.getMilliseconds();
    this.angle += this.speed*(this.seconds+1+(this.milliseconds/1000));
    if(this.radius <= 1){
      this.growRadius = true;
    } 
    if(this.radius >= this.size){
      this.growRadius = false;
    }
    
    if(this.growRadius){
      this.radius += 1;	
    } else {
      this.radius -= 1;	
    }
  };
  
/*Render Trail*/
this.renderTrail = function(){
    var i = this.trail.length;					
    
    this.ctx.beginPath();
    while(i--){
      var point = this.trail[i];
      var nextPoint = (i == this.trail.length) ? this.trail[i+1] : this.trail[i];
      
      var c = (point.x + nextPoint.x) / 2;
      var d = (point.y + nextPoint.y) / 2;						
      this.ctx.quadraticCurveTo(Math.round(this.arcx), Math.round(this.arcy), c, d);
      
      
      
    };
    this.ctx.strokeStyle = 'hsla('+this.rand(300,350)+', 100%, '+this.rand(40,60)+'%, 1)';	
    this.ctx.stroke();
    this.ctx.closePath();
    
  };
  
/*Clear Canvas*/

  this.clearCanvas = function(){
    //this.ctx.globalCompositeOperation = 'source-over';
    //this.ctx.clearRect(0,0,this.cw,this.ch);
	
    this.ctx.globalCompositeOperation = 'destination-out';
    this.ctx.fillStyle = 'rgba(0,0,0,.1)';
    this.ctx.fillRect(0,0,this.cw,this.ch);					
    this.ctx.globalCompositeOperation = 'lighter';
  };
  
/*Animation Loop*/

    this.loop = function(){
		console.log('ss');
        var loopIt = function(){
			if(!cosmosPause && !cosmosOff){
			    requestAnimationFrame(loopIt, _this.c);
                _this.clearCanvas();
                _this.updateArc();
                _this.updateTrail();
                _this.renderTrail();
            }			
        };
        loopIt();		
    };
  
    this.init = function(){
        this.loop();
    };
  
    this.stop = function(){
	  
    }
  
};

/*Check Canvas Support*/

var isCanvasSupported = function(){
  var elem = document.createElement('canvas');
  return !!(elem.getContext && elem.getContext('2d'));
};
	
/* Setup requestAnimationFrame*/

var setupRAF = function(){
  var lastTime = 0;
  var vendors = ['ms', 'moz', 'webkit', 'o'];
  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x){
    window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
  };
  
  if(!window.requestAnimationFrame){
    window.requestAnimationFrame = function(callback, element){
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function() { callback(currTime + timeToCall); }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  };
  
  if (!window.cancelAnimationFrame){
    window.cancelAnimationFrame = function(id){
      clearTimeout(id);
    };
  };
};			

var cosmosPause = false;
var cosmosOff = true;
/*Define Canvas and Initialize*/
function cosmos(){
	
	var cosmosWinWidth;
    var scrollTopAnim;
	var cosmosBox = $('#cosmosAnimationBox')
    var cosmosBottom = cosmosBox.offset().top + cosmosBox.height();
	var c;
	var container;
	
	function initCanvas(){
		c = document.getElementById('headerAnimation');
	    container = $('.header__animation');
		c.width = container.width();
	    c.height = container.height();
	}
	
	if(isCanvasSupported){
		initCanvas(); 
		var cl = new smoothTrail(c, c.width, c.height);
	}
	
	function determineWindow(cl){
		cosmosWinWidth = $(window).width();
	    if(cosmosWinWidth < 767){
			cosmosOff = true;
		    return false;
	    }
	    if(cosmosWinWidth > 767){
		    cl.size = 280;
		    if(cosmosOff === true){
			    if(cosmosPause === true){
				    cosmosPause = false;
				    cl.loop();
				}
				cosmosOff = false;
				cl.loop()
		    }
	    }
	}
	
	function cosmosResize(){
		determineWindow(cl);
	}
	
	function cosmosEvent(){
        scrollTop = $(window).scrollTop();
		if(cosmosOff === false){
		    if(scrollTop > cosmosBottom ){
	            cosmosPause = true;
		    }else{
				if(cosmosPause === true){
				    cosmosPause = false;
				    cl.loop();
				}
			}
	    }
	}	
	
	function startCosmos(cl){
	    determineWindow(cl);
	    cl.init();	
	}
	
	
	setupRAF();
	startCosmos(cl);
	
	window.addEventListener( 'scroll', cosmosEvent );
    window.addEventListener( 'resize', cosmosResize );	
}

